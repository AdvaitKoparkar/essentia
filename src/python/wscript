#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import distutils.sysconfig
import os
import sys


def options(ctx):
    ctx.load('python')


def configure(ctx):
    ctx.load('compiler_c python')
    ctx.check_python_version((2,7,0))
    if int(ctx.env.PYTHON_VERSION[0]) == 2:
        print ('→ Configuring for python2')
    else:
        print ('→ Configuring for python3')

    ctx.check_python_headers()
    ctx.check_python_module('numpy')

def adjust(objs, path):
    return [ '%s/%s' % (path, obj) for obj in objs ]

def build(ctx):
    print('→ building from ' + ctx.path.abspath())

    # gets the path from the active virtualenv
    PYLIB = distutils.sysconfig.get_python_lib()
    #print('-'*100)
    #print('ctx.env', ctx.env)
    #print('-'*100)
    NUMPY_INCPATH = [ # importable numpy path
                      __import__('numpy').get_include(),
                      # virtualenv path
                      os.path.join(PYLIB, 'numpy', 'core', 'include'),
                      # system python path
                      os.path.join(ctx.env.PYTHONDIR, 'numpy', 'core', 'include') ]
    if sys.platform == 'win32':
        pybindings = ctx.shlib(
            source = ctx.path.ant_glob('essentia.cpp parsing.cpp pytypes/*.cpp') + ctx.env.ESSENTIA_SOURCES,
            target = '_essentia',
            features = 'pyext',
            includes = NUMPY_INCPATH + [ '.', 'pytypes' ] + adjust(ctx.env.INCLUDES, '..'),
            cxxflags = [ '-w' ],
            install_path = '${PYTHONDIR}/essentia',
            use = ctx.env.USES
        )

        # Install all required prebuilt dll dependencies
        lib_paths = [path for key in ctx.env.keys() if key.startswith('LIBPATH_') 
                          for path in ctx.env[key] if path.count('packaging\\win32_3rdparty')]
        lib_paths = list(set(lib_paths))
        for path in lib_paths:
            print(path)
            ctx.install_files('${PYTHONDIR}/essentia',
                              ctx.root.find_dir(path).ant_glob('*.dll'),
                              relative_trick=False)

    else:
        pybindings = ctx.shlib(
            source   = ctx.path.ant_glob('essentia.cpp parsing.cpp pytypes/*.cpp'),
            target   = '_essentia',
            features = 'pyext',
            includes = NUMPY_INCPATH + [ '.', 'pytypes' ] + adjust(ctx.env.INCLUDES, '..'),
            cxxflags = [ '-w' ],
            install_path = '${PYTHONDIR}/essentia',
            use      = 'essentia ' #+ ctx.env.USES
        )

    ctx.install_files('${PYTHONDIR}', ctx.path.ant_glob('essentia/**/*.py'),
                      relative_trick=True)
